getwd()
library(ggplot2)
n = 200
x = runif(n)
normalize = function(x) (x-min(x))/(max(x)-min(x))
transp = function(color, alpha = 0.5) apply(sapply(color, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha=alpha))
p1 = x
p3 = normalize((x - 2/4)*(x - 2/4)*(x - 3/4))
p5 = normalize((x - 0/6)*(x - 2/6)*(x - 1/6)*(x - 5/6)*(x - 5/6))
s1 = normalize(sin(x*pi*2 + pi))
s3 = normalize(sin(x*pi*6))
dfp1 = data.frame(x = x, y = p1, colour = rep(transp('black'),n), pch=0)
dfp3 = data.frame(x = x, y = p3, colour = rep(transp('black'),n), pch=1)
dfp5 = data.frame(x = x, y = p5, colour = rep(transp('black'),n), pch=2)
dfs1 = data.frame(x = x, y = s1, colour = rep(transp('black'),n), pch=3)
dfs3 = data.frame(x = x, y = s3, colour = rep(transp('black'),n), pch=4)
df = rbind.data.frame(dfp1,dfp3,dfp5,dfs1,dfs3)
dfp = rbind.data.frame(dfp1,dfp3,dfp5)
dfs = rbind.data.frame(dfs1,dfs3)
# ggplot(data = df, aes(x,y), colour = df$colour, pch=df$pch) +
#   theme_bw() +
#   theme(panel.grid = element_blank(),
#         axis.title = element_blank()) +
#   geom_point(data = dfp1,aes(x,y),colour=transp('skyblue3')) +
#   geom_point(data = dfp3,aes(x,y),colour=transp('tomato3')) +
#   geom_point(data = dfp5,aes(x,y),colour=transp('springgreen3')) +
#   theme(panel.grid = element_blank(),
#         axis.title = element_blank()) +
#   geom_point(data = dfs1,aes(x,y),colour=transp('yellow3')) +
#   geom_point(data = dfs3,aes(x,y),colour=transp('snow3'))
plot(df$x, df$y, color = df$colour, pch = df$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4))
?legend
plot(df$x, df$y, color = df$colour, pch = df$pch, xlab = "", ylab = "")
legend("topleft", c(text("pol1",cex = 2), text("pol3",cex = 2), text("pol5",cex = 2), text("sin1",cex = 2), text("sin3")), pch = c(0,1,2,3,4))
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4))
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2))
plot(dfs$x, dfs$y, color = dfs$colour, pch = dfs$pch, xlab = "", ylab = "")
legend("topright", c("sin1","sin3"), pch = c(1,2))
library(ggplot2)
n = 200
x = runif(n)
normalize = function(x) (x-min(x))/(max(x)-min(x))
transp = function(color, alpha = 0.5) apply(sapply(color, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha=alpha))
p1 = x
p3 = normalize((x - 2/4)*(x - 2/4)*(x - 3/4))
p5 = normalize((x - 0/6)*(x - 2/6)*(x - 1/6)*(x - 5/6)*(x - 5/6))
s1 = normalize(sin(x*pi*2 + pi))
s3 = normalize(sin(x*pi*6))
dfp1 = data.frame(x = x, y = p1, colour = rep(transp('black'),n), pch=0)
dfp3 = data.frame(x = x, y = p3, colour = rep(transp('black'),n), pch=1)
dfp5 = data.frame(x = x, y = p5, colour = rep(transp('black'),n), pch=2)
dfs1 = data.frame(x = x, y = s1, colour = rep(transp('black'),n), pch=3)
dfs3 = data.frame(x = x, y = s3, colour = rep(transp('black'),n), pch=4)
df = rbind.data.frame(dfp1,dfp3,dfp5,dfs1,dfs3)
dfp = rbind.data.frame(dfp1,dfp3,dfp5)
dfs = rbind.data.frame(dfs1,dfs3)
# ggplot(data = df, aes(x,y), colour = df$colour, pch=df$pch) +
#   theme_bw() +
#   theme(panel.grid = element_blank(),
#         axis.title = element_blank()) +
#   geom_point(data = dfp1,aes(x,y),colour=transp('skyblue3')) +
#   geom_point(data = dfp3,aes(x,y),colour=transp('tomato3')) +
#   geom_point(data = dfp5,aes(x,y),colour=transp('springgreen3')) +
#   theme(panel.grid = element_blank(),
#         axis.title = element_blank()) +
#   geom_point(data = dfs1,aes(x,y),colour=transp('yellow3')) +
#   geom_point(data = dfs3,aes(x,y),colour=transp('snow3'))
plot(df$x, df$y, color = df$colour, pch = df$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4),col=1:20,lty=1:20, cex=0.8)
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4),lty=1:20, cex=2)
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4),cex=2)
plot(df$x, df$y, color = df$colour, pch = df$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4),cex=2)
plot(df$x, df$y, color = df$colour, pch = df$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4),cex=1.5)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.2)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.5)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.3)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.5)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.3)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.2)
plot(dfs$x, dfs$y, color = dfs$colour, pch = dfs$pch, xlab = "", ylab = "")
legend("topright", c("sin1","sin3"), pch = c(1,2), cex=1.2)
library(ggplot2)
n = 200
x = runif(n)
normalize = function(x) (x-min(x))/(max(x)-min(x))
transp = function(color, alpha = 0.5) apply(sapply(color, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha=alpha))
p1 = x
p3 = normalize((x - 2/4)*(x - 2/4)*(x - 3/4))
p5 = normalize((x - 0/6)*(x - 2/6)*(x - 1/6)*(x - 5/6)*(x - 5/6))
s1 = normalize(sin(x*pi*2 + pi))
s3 = normalize(sin(x*pi*6))
dfp1 = data.frame(x = x, y = p1, colour = rep(transp('black'),n), pch=0)
dfp3 = data.frame(x = x, y = p3, colour = rep(transp('black'),n), pch=1)
dfp5 = data.frame(x = x, y = p5, colour = rep(transp('black'),n), pch=2)
dfs1 = data.frame(x = x, y = s1, colour = rep(transp('black'),n), pch=3)
dfs3 = data.frame(x = x, y = s3, colour = rep(transp('black'),n), pch=4)
df = rbind.data.frame(dfp1,dfp3,dfp5,dfs1,dfs3)
dfp = rbind.data.frame(dfp1,dfp3,dfp5)
dfs = rbind.data.frame(dfs1,dfs3)
plot(dfs$x, dfs$y, color = dfs$colour, pch = dfs$pch, xlab = "", ylab = "")
legend("topright", c("sin1","sin3"), pch = c(3,4), cex=1.2)
library(ggplot2)
n = 200
x = runif(n)
normalize = function(x) (x-min(x))/(max(x)-min(x))
transp = function(color, alpha = 0.5) apply(sapply(color, col2rgb)/255, 2, function(x) rgb(x[1], x[2], x[3], alpha=alpha))
p1 = x
p3 = normalize((x - 2/4)*(x - 2/4)*(x - 3/4))
p5 = normalize((x - 0/6)*(x - 2/6)*(x - 1/6)*(x - 5/6)*(x - 5/6))
s1 = normalize(sin(x*pi*2 + pi))
s3 = normalize(sin(x*pi*6))
dfp1 = data.frame(x = x, y = p1, colour = rep(transp('black'),n), pch=0)
dfp3 = data.frame(x = x, y = p3, colour = rep(transp('black'),n), pch=1)
dfp5 = data.frame(x = x, y = p5, colour = rep(transp('black'),n), pch=2)
dfs1 = data.frame(x = x, y = s1, colour = rep(transp('black'),n), pch=3)
dfs3 = data.frame(x = x, y = s3, colour = rep(transp('black'),n), pch=4)
df = rbind.data.frame(dfp1,dfp3,dfp5,dfs1,dfs3)
dfp = rbind.data.frame(dfp1,dfp3,dfp5)
dfs = rbind.data.frame(dfs1,dfs3)
# ggplot(data = df, aes(x,y), colour = df$colour, pch=df$pch) +
#   theme_bw() +
#   theme(panel.grid = element_blank(),
#         axis.title = element_blank()) +
#   geom_point(data = dfp1,aes(x,y),colour=transp('skyblue3')) +
#   geom_point(data = dfp3,aes(x,y),colour=transp('tomato3')) +
#   geom_point(data = dfp5,aes(x,y),colour=transp('springgreen3')) +
#   theme(panel.grid = element_blank(),
#         axis.title = element_blank()) +
#   geom_point(data = dfs1,aes(x,y),colour=transp('yellow3')) +
#   geom_point(data = dfs3,aes(x,y),colour=transp('snow3'))
plot(df$x, df$y, color = df$colour, pch = df$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5","sin1", "sin3"), pch = c(0,1,2,3,4),cex=1.5)
plot(dfp$x, dfp$y, color = dfp$colour, pch = dfp$pch, xlab = "", ylab = "")
legend("topleft", c("pol1", "pol3", "pol5"), pch = c(0,1,2), cex=1.2)
plot(dfs$x, dfs$y, color = dfs$colour, pch = dfs$pch, xlab = "", ylab = "")
legend("topright", c("sin1","sin3"), pch = c(3,4), cex=1.2)
library(forecast)
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
### Plot original data
plot(data$table$price, type="l", xlim = c(1, nfinal), ylim = c(ymin - yrange/2, ymax + yrange/2),
xlab = "", ylab = "")
par(new = TRUE)
plot(forecast(fit,h=nfinal-nsplit), xlim = c(1, nfinal), ylim = c(ymin - yrange/2, ymax + yrange/2))
lines(nsplit:nfinal,data$table$price[nsplit:nfinal])
#abline(h=mean(ts))
#ts.diff = diff(ts)
#par(mfrow=c(2,1))
#plot(ts)
#plot(ts.diff)
#par(mfrow=c(1,1))
gfit.ts <- garch(sp5.ret[,1])
coef(gfit.ts)
plot(sqrt(252) * gfit.ts$fitted.values[, 1], type="l")
library(forecast)
library("Metrics")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
plot(forecast(fit,h=nfinal-nsplit))
KFoldLimits = function(nRow, numSplits = 10, pTrain = 0.7, pDiscard = 0.2){
nDiscard = max(floor(nRow*pDiscard),numSplits)
nFold = nRow - nDiscard
init  = ceiling(nDiscard*(1:numSplits)/numSplits)
end   = init + nFold
split = init + floor(nFold*pTrain)
cbind(init,split,end)
}
TestForecasting = function(train, test){
ts    = as.ts(train$price)
model = auto.arima(ts)
forec = forecast(model,nrow(test))
mse(forec$mean,test$price)
}
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
PlotAnalisys = function(n = 1){
head = n[1]
tail = n[-1]
data = LoadData(head)
PlotHistory(data)
goodPrice1 = GoodPrice(data,120,20, TRUE)
flags = cbind(goodPrice1)
PlotGoodPrices(data, mergeFlags(flags))
if(length(tail)>0)
PlotAnalisys(tail)
}
#par(mfrow = c(3,4))
#PlotAnalisys(1:12)
#dev.off()
PlotBuySell = function(n = 1, days = 30, perc = 20){
head = n[1]
tail = n[-1]
data = LoadData(head)
PlotHistory(data)
buyPrice = BuyPrice(data,days,perc)
sellPrice = SellPrice(data,days,100-perc)
buySell = BuySell(data, buyPrice, sellPrice)
PlotBuyPrices(data, buySell == -1, alpha = 0.8)
PlotSellPrices(data, buySell == 1, alpha = 0.8)
if(length(tail)>0)
PlotAnalisys(tail)
}
TestGain = function(n = 1, days = 30, perc = 20){
data = LoadData(n)
buyPrice = BuyPrice(data,days,perc)
sellPrice = SellPrice(data,days,100-perc)
EvaluateGain(data,buyPrice,sellPrice)
}
for(i in 1:10) print(TestGain(i,days = 10, perc = 20))
library(forecast)
library("Metrics")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
#source("priceAnalisys.R")
#source("formatData.R")
#source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
plot(forecast(fit,h=nfinal-nsplit))
KFoldLimits = function(nRow, numSplits = 10, pTrain = 0.7, pDiscard = 0.2){
nDiscard = max(floor(nRow*pDiscard),numSplits)
nFold = nRow - nDiscard
init  = ceiling(nDiscard*(1:numSplits)/numSplits)
end   = init + nFold
split = init + floor(nFold*pTrain)
cbind(init,split,end)
}
TestForecasting = function(train, test){
ts    = as.ts(train$price)
model = auto.arima(ts)
forec = forecast(model,nrow(test))
mse(forec$mean,test$price)
}
library(forecast)
library("Metrics")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
plot(forecast(fit,h=nfinal-nsplit))
KFoldLimits = function(nRow, numSplits = 10, pTrain = 0.7, pDiscard = 0.2){
nDiscard = max(floor(nRow*pDiscard),numSplits)
nFold = nRow - nDiscard
init  = ceiling(nDiscard*(1:numSplits)/numSplits)
end   = init + nFold
split = init + floor(nFold*pTrain)
cbind(init,split,end)
}
TestForecasting = function(train, test){
ts    = as.ts(train$price)
model = auto.arima(ts)
forec = forecast(model,nrow(test))
mse(forec$mean,test$price)
}
library(forecast)
library("Metrics")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
plot(forecast(fit,h=nfinal-nsplit))
KFoldLimits = function(nRow, numSplits = 10, pTrain = 0.7, pDiscard = 0.2){
nDiscard = max(floor(nRow*pDiscard),numSplits)
nFold = nRow - nDiscard
init  = ceiling(nDiscard*(1:numSplits)/numSplits)
end   = init + nFold
split = init + floor(nFold*pTrain)
cbind(init,split,end)
}
TestForecasting = function(train, test){
ts    = as.ts(train$price)
model = auto.arima(ts)
forec = forecast(model,nrow(test))
mse(forec$mean,test$price)
}
library(forecast)
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
### Plot original data
plot(data$table$price, type="l", xlim = c(1, nfinal), ylim = c(ymin - yrange/2, ymax + yrange/2),
xlab = "", ylab = "")
par(new = TRUE)
plot(forecast(fit,h=nfinal-nsplit), xlim = c(1, nfinal), ylim = c(ymin - yrange/2, ymax + yrange/2))
lines(nsplit:nfinal,data$table$price[nsplit:nfinal])
#abline(h=mean(ts))
#ts.diff = diff(ts)
#par(mfrow=c(2,1))
#plot(ts)
#plot(ts.diff)
#par(mfrow=c(1,1))
gfit.ts <- garch(sp5.ret[,1])
coef(gfit.ts)
plot(sqrt(252) * gfit.ts$fitted.values[, 1], type="l")
library(forecast)
library("Metrics")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
#source("priceAnalisys.R")
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
plot(forecast(fit,h=nfinal-nsplit))
KFoldLimits = function(nRow, numSplits = 10, pTrain = 0.7, pDiscard = 0.2){
nDiscard = max(floor(nRow*pDiscard),numSplits)
nFold = nRow - nDiscard
init  = ceiling(nDiscard*(1:numSplits)/numSplits)
end   = init + nFold
split = init + floor(nFold*pTrain)
cbind(init,split,end)
}
TestForecasting = function(train, test){
ts    = as.ts(train$price)
model = auto.arima(ts)
forec = forecast(model,nrow(test))
mse(forec$mean,test$price)
}
library(forecast)
library("Metrics")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys"
setwd(filesPath)
source("formatData.R")
source("plotData.R")
filesPath = "D:/projects/PriceAnalisys/PriceAnalisys/prices"
setwd(filesPath)
### Load dataset
data = LoadData(12)
### Range config
days = 145
ptrain = 0.7
### Control parameters
nfinal = nrow(data$table)
ninit = nfinal - days
nsplit = ninit + floor(days*ptrain)
ymax = max(data$table$price)
ymin = min(data$table$price)
yrange = ymax - ymin
### Training dataset
prices = data$table$price
### Train ARIMA
ts = as.ts(prices[1:nsplit])
fit = auto.arima(ts)
plot(forecast(fit,h=nfinal-nsplit))
KFoldLimits = function(nRow, numSplits = 10, pTrain = 0.7, pDiscard = 0.2){
nDiscard = max(floor(nRow*pDiscard),numSplits)
nFold = nRow - nDiscard
init  = ceiling(nDiscard*(1:numSplits)/numSplits)
end   = init + nFold
split = init + floor(nFold*pTrain)
cbind(init,split,end)
}
TestForecasting = function(train, test){
ts    = as.ts(train$price)
model = auto.arima(ts)
forec = forecast(model,nrow(test))
mse(forec$mean,test$price)
}
-version
version
